{"version":3,"sources":["webpack:///./src/components/post-card-modern/post-card-modern.style.tsx","webpack:///./src/components/post-card-modern/post-card-modern.tsx","webpack:///./src/components/pagination/pagination.style.tsx","webpack:///./src/components/pagination/pagination.tsx","webpack:///./src/templates/blog-list.tsx"],"names":["PostCardModernWrapper","styled","div","PostPreview","PostDetails","PostDate","PostTitle","h2","themeGet","Excerpt","p","PostTags","PostCardModern","image","title","description","url","date","tags","className","imageType","placeholderBG","props","addAllClasses","push","join","to","fluid","alt","backgroundColor","fixed","dangerouslySetInnerHTML","__html","map","tag","index","key","defaultProps","PaginationWrapper","PrevPage","NextPage","PageNumber","Pagination","prevLink","nextLink","currentPage","totalPage","aria-label","pageQuery","BlogList","Posts","data","allMarkdownRemark","edges","pageContext","numPages","isFirst","isLast","prevPage","toString","nextPage","PrevLink","NextLink","node","placeholderColors","setColor","Math","floor","random","length","fields","slug","frontmatter","cover","childImageSharp","excerpt"],"mappings":"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","file":"component---src-templates-blog-list-tsx-5d47f0dbbf9f83846f52.js","sourcesContent":["import styled from 'styled-components';\r\nimport { themeGet } from '@styled-system/theme-get';\r\n\r\nexport const PostCardModernWrapper = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nexport const PostPreview = styled.div`\r\n  margin-bottom: 30px;\r\n  position: relative;\r\n  min-height: 150px;\r\n  img {\r\n    border-radius: 3px;\r\n  }\r\n\r\n  &:before {\r\n    content: '';\r\n    position: absolute;\r\n    width: 80%;\r\n    height: 80%;\r\n    background-color: #757575;\r\n    bottom: 0;\r\n    left: 10%;\r\n    filter: blur(15px);\r\n  }\r\n`;\r\n\r\nexport const PostDetails = styled.div``;\r\n\r\nexport const PostDate = styled.div`\r\n  position: absolute;\r\n  width: 75px;\r\n  height: 75px;\r\n  top: 30px;\r\n  left: 30px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #fff;\r\n  border-radius: 6px;\r\n  font-size: 30px;\r\n  font-weight: bold;\r\n  line-height: 1;\r\n  pointer-events: none;\r\n  z-index: 1;\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  > span {\r\n    font-size: 13px;\r\n    font-weight: normal;\r\n    line-height: 1;\r\n    margin-top: 3px;\r\n  }\r\n`;\r\n\r\nexport const PostTitle = styled.h2`\r\n  font-size: 21px;\r\n  font-weight: 700;\r\n  color: ${themeGet('colors.textColor', '#292929')};\r\n  line-height: 1.53;\r\n  margin-bottom: 10px;\r\n  font-family: ${themeGet('fontFamily.0')};\r\n  a {\r\n    color: ${themeGet('colors.textColor', '#292929')};\r\n  }\r\n  @media (max-width: 1200px) {\r\n    font-size: 20px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    font-size: 19px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    font-size: 18px;\r\n  }\r\n`;\r\n\r\nexport const Excerpt = styled.p`\r\n  font-size: ${themeGet('fontSizes.3', '15')}px;\r\n  color: ${themeGet('textColor', '#292929')};\r\n  font-weight: 400;\r\n  line-height: 2;\r\n  margin-bottom: 0;\r\n  @media (max-width: 990px) {\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nexport const PostTags = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n\r\n  a {\r\n    display: block;\r\n    margin-right: 30px;\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n    color: ${themeGet('primary', '#D10068')};\r\n    @media (max-width: 990px) {\r\n      font-size: 13px;\r\n      margin-right: 25px;\r\n    }\r\n  }\r\n`;\r\n","import * as React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport _ from 'lodash';\r\nimport Img from 'gatsby-image';\r\nimport {\r\n  PostCardModernWrapper,\r\n  PostPreview,\r\n  PostDetails,\r\n  PostDate,\r\n  PostTitle,\r\n  Excerpt,\r\n  PostTags,\r\n} from './post-card-modern.style';\r\n\r\ninterface PostCardModernProps {\r\n  image?: any;\r\n  title: string;\r\n  description?: string;\r\n  url: string;\r\n  date?: string;\r\n  tags?: [];\r\n  className?: string;\r\n  imageType?: 'fixed' | 'fluid';\r\n  placeholderBG?: string;\r\n}\r\n\r\nconst PostCardModern: React.FunctionComponent<PostCardModernProps> = ({\r\n  image,\r\n  title,\r\n  description,\r\n  url,\r\n  date,\r\n  tags,\r\n  className,\r\n  imageType,\r\n  placeholderBG,\r\n  ...props\r\n}) => {\r\n  // Add all classs to an array\r\n  const addAllClasses = ['post_card_modern'];\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className);\r\n  }\r\n\r\n  return (\r\n    <PostCardModernWrapper className={addAllClasses.join(' ')} {...props}>\r\n      {image == null ? null : (\r\n        <PostPreview className=\"post_preview\">\r\n          <Link to={url}>\r\n            {imageType === 'fluid' ? (\r\n              <Img\r\n                fluid={image}\r\n                alt=\"post preview\"\r\n                backgroundColor={placeholderBG}\r\n              />\r\n            ) : (\r\n              <Img\r\n                fixed={image}\r\n                alt=\"post preview\"\r\n                backgroundColor={placeholderBG}\r\n              />\r\n            )}\r\n          </Link>\r\n          {date && (\r\n            <PostDate\r\n              dangerouslySetInnerHTML={{\r\n                __html: date,\r\n              }}\r\n              className=\"post_date\"\r\n            />\r\n          )}\r\n        </PostPreview>\r\n      )}\r\n\r\n      <PostDetails className=\"post_details\">\r\n        {tags == null ? null : (\r\n          <PostTags className=\"post_tags\">\r\n            {tags.map((tag: string, index: number) => (\r\n              <Link key={index} to={`/tags/${_.kebabCase(tag)}/`}>\r\n                {`#${tag}`}\r\n              </Link>\r\n            ))}\r\n          </PostTags>\r\n        )}\r\n        <PostTitle className=\"post_title\">\r\n          <Link to={url}>{title}</Link>\r\n        </PostTitle>\r\n        {description && (\r\n          <Excerpt\r\n            dangerouslySetInnerHTML={{\r\n              __html: description,\r\n            }}\r\n            className=\"excerpt\"\r\n          />\r\n        )}\r\n      </PostDetails>\r\n    </PostCardModernWrapper>\r\n  );\r\n};\r\n\r\nPostCardModern.defaultProps = {\r\n  imageType: 'fluid',\r\n};\r\n\r\nexport default PostCardModern;\r\n","import styled from 'styled-components';\r\nimport { themeGet } from '@styled-system/theme-get';\r\n\r\nexport const PaginationWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const PrevPage = styled.div`\r\n  min-width: 32px;\r\n  a {\r\n    width: 32px;\r\n    height: 32px;\r\n    color: ${themeGet('colors.textColor', '#292929')};\r\n    border-radius: 50%;\r\n    background-color: #f3f3f3;\r\n    font-size: 18px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: 0.15s ease-in-out;\r\n    svg {\r\n      display: block;\r\n    }\r\n    &:hover {\r\n      color: #fff;\r\n      background-color: ${themeGet('colors.primary', '#D10068')};\r\n    }\r\n  }\r\n`;\r\n\r\nexport const NextPage = styled.div`\r\n  min-width: 32px;\r\n  a {\r\n    width: 32px;\r\n    height: 32px;\r\n    color: ${themeGet('colors.textColor', '#292929')};\r\n    border-radius: 50%;\r\n    background-color: #f3f3f3;\r\n    font-size: 18px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: 0.15s ease-in-out;\r\n    svg {\r\n      display: block;\r\n    }\r\n    &:hover {\r\n      color: #fff;\r\n      background-color: ${themeGet('colors.primary', '#D10068')};\r\n    }\r\n  }\r\n`;\r\n\r\nexport const PageNumber = styled.div``;\r\n","import * as React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport { IoMdArrowRoundBack, IoMdArrowRoundForward } from 'react-icons/io';\r\nimport {\r\n  PaginationWrapper,\r\n  PrevPage,\r\n  NextPage,\r\n  PageNumber,\r\n} from './pagination.style';\r\n\r\ntype PaginationProps = {\r\n  prevLink?: string | undefined | null | boolean;\r\n  nextLink?: string | undefined | null | boolean;\r\n  currentPage: string;\r\n  totalPage: string;\r\n  className?: string;\r\n};\r\n\r\nconst Pagination: React.FunctionComponent<PaginationProps> = ({\r\n  prevLink,\r\n  nextLink,\r\n  currentPage,\r\n  totalPage,\r\n  className,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <PaginationWrapper {...props} className={className}>\r\n      <PrevPage>\r\n        {prevLink && (\r\n          <Link to={`${prevLink}`} aria-label=\"Prev\">\r\n            <IoMdArrowRoundBack />\r\n          </Link>\r\n        )}\r\n      </PrevPage>\r\n\r\n      <PageNumber>{`Page ${currentPage} Of ${totalPage}`}</PageNumber>\r\n\r\n      <NextPage>\r\n        {nextLink && (\r\n          <Link to={`${nextLink}`} aria-label=\"Next\">\r\n            <IoMdArrowRoundForward />\r\n          </Link>\r\n        )}\r\n      </NextPage>\r\n    </PaginationWrapper>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import * as React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport PostCardModern from '../components/post-card-modern/post-card-modern';\r\nimport Pagination from '../components/pagination/pagination';\r\nimport Layout from '../components/layout';\r\nimport SEO from '../components/seo';\r\nimport { BlogPostsWrapper, PostRow, PostGrid } from './templates.style';\r\n\r\nconst BlogList = (props: any) => {\r\n  const { data } = props;\r\n  const Posts = data.allMarkdownRemark.edges;\r\n  const { currentPage, numPages } = props.pageContext;\r\n  const isFirst = currentPage === 1;\r\n  const isLast = currentPage === numPages;\r\n  const prevPage =\r\n    currentPage - 1 === 1 ? '/page/1' : `/page/${(currentPage - 1).toString()}`;\r\n  const nextPage = `/page/${(currentPage + 1).toString()}`;\r\n  const PrevLink = !isFirst && prevPage;\r\n  const NextLink = !isLast && nextPage;\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title={`Page ${currentPage}`} />\r\n\r\n      <BlogPostsWrapper>\r\n        <PostRow>\r\n          {Posts.map(({ node }: any) => {\r\n            // Random Placeholder Color\r\n            const placeholderColors = [\r\n              '#55efc4',\r\n              '#81ecec',\r\n              '#74b9ff',\r\n              '#a29bfe',\r\n              '#ffeaa7',\r\n              '#fab1a0',\r\n              '#e17055',\r\n              '#0984e3',\r\n              '#badc58',\r\n              '#c7ecee',\r\n            ];\r\n            const setColor =\r\n              placeholderColors[\r\n                Math.floor(Math.random() * placeholderColors.length)\r\n              ];\r\n            return (\r\n              <PostGrid>\r\n                <PostCardModern\r\n                  key={node.fields.slug}\r\n                  title={node.frontmatter.title || node.fields.slug}\r\n                  image={\r\n                    node.frontmatter.cover == null\r\n                      ? null\r\n                      : node.frontmatter.cover.childImageSharp.fluid\r\n                  }\r\n                  url={node.fields.slug}\r\n                  description={node.frontmatter.description || node.excerpt}\r\n                  date={node.frontmatter.date}\r\n                  tags={node.frontmatter.tags}\r\n                  placeholderBG={setColor}\r\n                />\r\n              </PostGrid>\r\n            );\r\n          })}\r\n        </PostRow>\r\n        <Pagination\r\n          prevLink={PrevLink}\r\n          nextLink={NextLink}\r\n          currentPage={`${currentPage}`}\r\n          totalPage={`${numPages}`}\r\n        />\r\n      </BlogPostsWrapper>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default BlogList;\r\n\r\nexport const pageQuery = graphql`\r\n  query($skip: Int!, $limit: Int!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    sitePage {\r\n      path\r\n    }\r\n    allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          excerpt(pruneLength: 300)\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"DD [<span>] MMMM [</span>]\")\r\n            title\r\n            description\r\n            tags\r\n            cover {\r\n              childImageSharp {\r\n                fluid(maxWidth: 1170, quality: 90) {\r\n                  ...GatsbyImageSharpFluid_noBase64\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}